<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title><%= title %> - GLA English</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg, #ecfdf5 0%, #e0f2fe 100%);
    }
    .notify {
      position: fixed;
      right: 20px;
      bottom: 20px;
      z-index: 60;
      max-width: 320px;
    }
    .sidebar-transition {
      transition: transform 0.3s ease-in-out;
    }
    @media (max-width: 768px) {
      #sidebar.mobile-hidden {
        transform: translateX(-100%);
      }
    }
    .stat-card {
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .stat-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 24px rgba(0,0,0,0.1);
    }
    .lesson-card {
      transition: all 0.3s ease;
    }
    .lesson-card:hover {
      transform: scale(1.02);
      box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body class="min-h-screen flex">

  <!-- Sidebar -->
  <aside id="sidebar" class="bg-white w-72 p-6 border-r border-gray-100 flex flex-col fixed h-full z-50 md:relative sidebar-transition">
    <div class="mb-8">
      <h1 class="text-2xl font-bold bg-gradient-to-r from-teal-600 to-cyan-600 bg-clip-text text-transparent">GLA English</h1>
      <p class="text-sm text-gray-500 mt-1">Welcome, <%= userName %></p>
    </div>

    <nav class="flex-1 space-y-2 overflow-y-auto">
      <a href="/dashboard" class="flex items-center gap-3 px-4 py-3 rounded-xl bg-gradient-to-r from-teal-50 to-cyan-50 text-teal-700 font-medium">
        <i class="fas fa-home w-5"></i>
        <span>Dashboard</span>
      </a>

      <!-- Lessons with subcategories -->
      <div class="space-y-1">
        <button onclick="toggleSubmenu('lessons')" class="w-full flex items-center justify-between px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
          <div class="flex items-center gap-3">
            <i class="fas fa-book-open w-5"></i>
            <span>Lessons</span>
          </div>
          <i id="lessons-arrow" class="fas fa-chevron-right text-xs transition-transform"></i>
        </button>
        <div id="lessons-submenu" class="hidden pl-6 space-y-1 mt-1">
          <a href="/dashboard/lessons/Grammar" class="flex items-center gap-3 px-4 py-2 rounded-lg text-sm text-gray-600 hover:bg-gray-50 transition">
            <i class="fas fa-spell-check w-4"></i>
            <span>Grammar & Usage</span>
          </a>
          <a href="/dashboard/lessons/speaking" class="flex items-center gap-3 px-4 py-2 rounded-lg text-sm text-gray-600 hover:bg-gray-50 transition">
            <i class="fas fa-microphone w-4"></i>
            <span>Speaking Skills</span>
          </a>
          <a href="/dashboard/lessons/Writting" class="flex items-center gap-3 px-4 py-2 rounded-lg text-sm text-gray-600 hover:bg-gray-50 transition">
            <i class="fas fa-pen w-4"></i>
            <span>Writing Practice</span>
          </a>
        </div>
      </div>

      <a href="/dashboard/vocabulary" class="flex items-center gap-3 px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
        <i class="fas fa-brain w-5"></i>
        <span>Vocabulary</span>
      </a>

      <a href="/dashboard/test" class="flex items-center gap-3 px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
        <i class="fas fa-clipboard-check w-5"></i>
        <span>Tests & Assessments</span>
      </a>

      <a href="/dashboard/resume" class="flex items-center gap-3 px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
        <i class="fas fa-file-alt w-5"></i>
        <span>Resume & Writing Lab</span>
      </a>

      <a href="/dashboard/placement" class="flex items-center gap-3 px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
        <i class="fas fa-graduation-cap w-5"></i>
        <span>Placement Resources</span>
      </a>

      <a href="/dashboard/profile" class="flex items-center gap-3 px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
        <i class="fas fa-user w-5"></i>
        <span>My Profile</span>
      </a>

      <a href="/dashboard/setting" class="flex items-center gap-3 px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
        <i class="fas fa-cog w-5"></i>
        <span>Settings</span>
      </a> -->
       <a href="/dashboard/ai" class="flex items-center gap-3 px-4 py-3 rounded-xl text-gray-700 hover:bg-gray-50 font-medium transition">
        <i class="fas fa-cog w-5"></i>
        <span>AI Feedback System</span>
      </a>
    </nav>

    <div class="mt-6 pt-6 border-t border-gray-100">
      <a href="/logout" class="flex items-center justify-center gap-2 text-red-600 py-3 rounded-xl hover:bg-red-50 font-medium transition">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
      </a>
    </div>
  </aside>

  <!-- Overlay for mobile -->
  <div id="overlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden md:hidden" onclick="toggleSidebar()"></div>

  <!-- Main content -->
  <div class="flex-1 md:ml-0">
    <div class="p-6 md:p-10">
      <!-- Top bar -->
      <header class="flex items-center justify-between mb-8">
        <div class="flex items-center gap-4">
          <!-- Mobile menu toggle -->
          <button id="menuBtn" class="md:hidden p-2 bg-white rounded-xl shadow-md hover:shadow-lg transition">
            <i class="fas fa-bars text-gray-700 text-xl"></i>
          </button>

          <div>
            <h2 class="text-3xl font-bold text-gray-800">
              Welcome back, <span class="bg-gradient-to-r from-teal-600 to-cyan-600 bg-clip-text text-transparent"><%= userName %></span>
            </h2>
            <p class="text-sm text-gray-500 mt-1">Keep going — your progress looks great!</p>
          </div>
        </div>

        <div class="flex items-center gap-3">
          <button id="notifBtn" class="p-3 bg-white rounded-xl shadow-md hover:shadow-lg transition relative">
            <i class="fas fa-bell text-gray-600"></i>
            <span class="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
          </button>
          <a href="/dashboard/profile" class="w-11 h-11 rounded-xl bg-gradient-to-r from-teal-500 to-cyan-500 flex items-center justify-center text-white font-bold hover:scale-105 transition shadow-md">
            <%= userName.charAt(0).toUpperCase() %>
          </a>
        </div>
      </header>

      <!-- Stats Overview Cards -->
      <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="stat-card bg-white p-6 rounded-2xl shadow-md">
          <div class="flex items-center justify-between mb-4">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-100 to-blue-200 rounded-xl flex items-center justify-center">
              <i class="fas fa-book text-blue-600 text-xl"></i>
            </div>
            <span class="text-2xl font-bold text-gray-800" id="completedLessons">0</span>
          </div>
          <p class="text-sm text-gray-500">Lessons Completed</p>
          <div class="mt-2 text-xs text-green-600 font-medium">
            <i class="fas fa-arrow-up"></i> <span id="lessonIncrease">+2</span> this week
          </div>
        </div>

        <div class="stat-card bg-white p-6 rounded-2xl shadow-md">
          <div class="flex items-center justify-between mb-4">
            <div class="w-12 h-12 bg-gradient-to-br from-green-100 to-green-200 rounded-xl flex items-center justify-center">
              <i class="fas fa-language text-green-600 text-xl"></i>
            </div>
            <span class="text-2xl font-bold text-gray-800" id="vocabCount">0</span>
          </div>
          <p class="text-sm text-gray-500">Words Mastered</p>
          <div class="mt-2 text-xs text-green-600 font-medium">
            <i class="fas fa-arrow-up"></i> <span id="vocabIncrease">+15</span> new words
          </div>
        </div>

        <div class="stat-card bg-white p-6 rounded-2xl shadow-md">
          <div class="flex items-center justify-between mb-4">
            <div class="w-12 h-12 bg-gradient-to-br from-orange-100 to-orange-200 rounded-xl flex items-center justify-center">
              <i class="fas fa-fire text-orange-600 text-xl"></i>
            </div>
            <span class="text-2xl font-bold text-gray-800" id="streakCount">0</span>
          </div>
          <p class="text-sm text-gray-500">Day Streak</p>
          <div class="mt-2 text-xs text-gray-600 font-medium">
            Keep it going!
          </div>
        </div>

        <div class="stat-card bg-white p-6 rounded-2xl shadow-md">
          <div class="flex items-center justify-between mb-4">
            <div class="w-12 h-12 bg-gradient-to-br from-purple-100 to-purple-200 rounded-xl flex items-center justify-center">
              <i class="fas fa-clipboard-check text-purple-600 text-xl"></i>
            </div>
            <span class="text-2xl font-bold text-gray-800" id="testsCount">0</span>
          </div>
          <p class="text-sm text-gray-500">Tests Taken</p>
          <div class="mt-2 text-xs text-gray-600 font-medium">
            Avg score: <span id="avgScore">0</span>%
          </div>
        </div>
      </section>

      <!-- Main Content Grid -->
      <section class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">

        <!-- Progress Chart Card -->
        <div class="lg:col-span-2 bg-white p-6 rounded-2xl shadow-md hover:shadow-lg transition-all duration-300">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-gray-800 flex items-center gap-2">
              <i class="fas fa-chart-line text-teal-600"></i>
              Learning Progress
            </h3>
            <div class="text-xs text-gray-500">Updated: <span id="lastUpdated">--</span></div>
          </div>

          <div class="grid md:grid-cols-2 gap-6">
            <div class="relative">
              <canvas id="progressChart" class="max-h-64 w-full cursor-pointer hover:scale-105 transition-transform duration-300"></canvas>
              <div class="absolute inset-0 flex items-center justify-center pointer-events-none">
                <div class="text-center">
                  <div id="chartValue" class="text-2xl font-bold text-gray-800 hidden">0%</div>
                  <div class="text-xs text-gray-500 hidden" id="chartLabel">Progress</div>
                </div>
              </div>
            </div>

            <div class="space-y-4">
              <div>
                <div class="flex justify-between text-sm mb-2">
                  <span class="text-gray-700 font-medium">Grammar</span>
                  <span class="text-gray-600" id="grammarPercent">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                  <div id="grammarBar" class="h-3 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 transition-all duration-500" style="width: 0%"></div>
                </div>
              </div>

              <div>
                <div class="flex justify-between text-sm mb-2">
                  <span class="text-gray-700 font-medium">Vocabulary</span>
                  <span class="text-gray-600" id="vocabPercent">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                  <div id="vocabBar" class="h-3 rounded-full bg-gradient-to-r from-green-500 to-green-600 transition-all duration-500" style="width: 0%"></div>
                </div>
              </div>

              <div>
                <div class="flex justify-between text-sm mb-2">
                  <span class="text-gray-700 font-medium">Speaking</span>
                  <span class="text-gray-600" id="speakingPercent">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                  <div id="speakingBar" class="h-3 rounded-full bg-gradient-to-r from-orange-500 to-orange-600 transition-all duration-500" style="width: 0%"></div>
                </div>
              </div>

              <div>
                <div class="flex justify-between text-sm mb-2">
                  <span class="text-gray-700 font-medium">Writing</span>
                  <span class="text-gray-600" id="writingPercent">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                  <div id="writingBar" class="h-3 rounded-full bg-gradient-to-r from-purple-500 to-purple-600 transition-all duration-500" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions Card -->
        <div class="bg-white p-6 rounded-2xl shadow-md">
          <h4 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
            <i class="fas fa-bolt text-yellow-500"></i>
            Quick Actions
          </h4>
          <div class="space-y-3">
            <a href="/dashboard/lessons/Grammar" class="lesson-card block px-5 py-4 rounded-xl bg-gradient-to-r from-teal-500 to-cyan-500 text-white text-center font-medium shadow-md hover:shadow-lg">
              <i class="fas fa-play-circle mr-2"></i>Continue Lessons
            </a>

            <a href="/dashboard/lessons/speaking" class="lesson-card block px-5 py-4 rounded-xl border-2 border-gray-200 text-gray-700 text-center font-medium hover:border-teal-500 hover:bg-teal-50">
              <i class="fas fa-microphone mr-2"></i>Speaking Practice
            </a>

            <a href="/Vocabulary" class="lesson-card block px-5 py-4 rounded-xl border-2 border-gray-200 text-gray-700 text-center font-medium hover:border-green-500 hover:bg-green-50">
              <i class="fas fa-book-reader mr-2"></i>Daily Vocabulary
            </a>

            <a href="/dashboard/test" class="lesson-card block px-5 py-4 rounded-xl border-2 border-gray-200 text-gray-700 text-center font-medium hover:border-purple-500 hover:bg-purple-50">
              <i class="fas fa-clipboard-list mr-2"></i>Take a Test
            </a>
          </div>

          <!-- Study Streak Widget -->
          <div class="mt-6 p-4 bg-gradient-to-br from-orange-50 to-yellow-50 rounded-xl border border-orange-100">
            <div class="flex items-center gap-3 mb-2">
              <i class="fas fa-fire text-orange-500 text-2xl"></i>
              <div>
                <div class="text-2xl font-bold text-gray-800" id="streakDisplay">0</div>
                <div class="text-xs text-gray-600">Day Streak</div>
              </div>
            </div>
            <p class="text-xs text-gray-600 mt-2">Complete a lesson today to keep your streak going!</p>
          </div>
        </div>
      </section>

      <!-- Recent Activity & Achievements -->
      <section class="grid grid-cols-1 lg:grid-cols-2 gap-6">

        <!-- Recent Activity -->
        <div class="bg-white p-6 rounded-2xl shadow-md">
          <h4 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
            <i class="fas fa-history text-blue-600"></i>
            Recent Activity
          </h4>
          <ul id="recentList" class="space-y-3">
            <li class="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <i class="fas fa-spinner fa-spin text-blue-600"></i>
              </div>
              <span class="text-sm text-gray-600">Loading activity...</span>
            </li>
          </ul>
        </div>

        <!-- Achievements -->
        <div class="bg-white p-6 rounded-2xl shadow-md">
          <h4 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
            <i class="fas fa-trophy text-yellow-500"></i>
            Recent Achievements
          </h4>
          <div class="grid grid-cols-3 gap-4">
            <div class="text-center p-4 bg-gradient-to-br from-yellow-50 to-yellow-100 rounded-xl">
              <div class="text-3xl mb-2">🔥</div>
              <div class="text-xs font-semibold text-gray-700">7 Day Streak</div>
            </div>
            <div class="text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl">
              <div class="text-3xl mb-2">📚</div>
              <div class="text-xs font-semibold text-gray-700">Book Worm</div>
            </div>
            <div class="text-center p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-xl">
              <div class="text-3xl mb-2">⭐</div>
              <div class="text-xs font-semibold text-gray-700">Rising Star</div>
            </div>
            <div class="text-center p-4 bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl">
              <div class="text-3xl mb-2">🎯</div>
              <div class="text-xs font-semibold text-gray-700">Goal Getter</div>
            </div>
            <div class="text-center p-4 bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl">
              <div class="text-3xl mb-2">💪</div>
              <div class="text-xs font-semibold text-gray-700">Consistent</div>
            </div>
            <div class="text-center p-4 bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl opacity-50">
              <div class="text-3xl mb-2">🏆</div>
              <div class="text-xs font-semibold text-gray-700">Master</div>
            </div>
          </div>
        </div>
      </section>
    </div>
  </div>

  <!-- Floating Calendar Button -->
  <div class="fixed bottom-6 right-6 z-[100]">
    <button onclick="openCalendar()" class="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white rounded-full shadow-2xl hover:shadow-3xl transform hover:scale-110 transition-all duration-300 flex items-center justify-center border-4 border-white pointer-events-auto">
      <i class="fas fa-calendar-alt text-2xl"></i>
    </button>
  </div>

  <!-- Notification container -->
  <div id="notify" class="notify hidden">
    <div class="bg-white p-4 rounded-xl shadow-2xl border-l-4 border-teal-500">
      <div class="flex items-start gap-3">
        <i class="fas fa-bell text-teal-500 text-xl mt-1"></i>
        <div>
          <div class="font-bold text-gray-800" id="notifyTitle">Notification</div>
          <div class="text-sm text-gray-600 mt-1" id="notifyBody">You have new updates.</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Client JS -->
  <script>
    // Sidebar toggle
    const menuBtn = document.getElementById('menuBtn');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');

    function toggleSidebar() {
      sidebar.classList.toggle('mobile-hidden');
      overlay.classList.toggle('hidden');
    }

    menuBtn?.addEventListener('click', toggleSidebar);

    // Submenu toggle
    function toggleSubmenu(menu) {
      const submenu = document.getElementById(menu + '-submenu');
      const arrow = document.getElementById(menu + '-arrow');

      if (submenu.classList.contains('hidden')) {
        submenu.classList.remove('hidden');
        arrow.classList.remove('fa-chevron-right');
        arrow.classList.add('fa-chevron-down');
      } else {
        submenu.classList.add('hidden');
        arrow.classList.remove('fa-chevron-down');
        arrow.classList.add('fa-chevron-right');
      }
    }

    // Calendar functionality
    function openCalendar() {
      console.log('Calendar button clicked!');

      // Remove existing calendar if open
      const existingCalendar = document.getElementById('calendar-popup');
      if (existingCalendar) {
        existingCalendar.remove();
        return;
      }

      // Create calendar popup
      const calendarHTML = `
        <div id="calendar-popup" class="fixed bg-white rounded-xl shadow-2xl border border-gray-200 p-4 z-[200]" style="bottom: 100px; right: 24px; width: 280px;">
          <div class="flex justify-between items-center mb-4">
            <h3 class="font-bold text-gray-800">Study Calendar</h3>
            <button onclick="closeCalendar()" class="text-gray-400 hover:text-gray-600">
              <i class="fas fa-times"></i>
            </button>
          </div>
          <div id="calendar-content">
            ${generateCalendarHTML()}
          </div>
        </div>
      `;

      document.body.insertAdjacentHTML('beforeend', calendarHTML);
    }

    function closeCalendar() {
      const calendar = document.getElementById('calendar-popup');
      if (calendar) {
        calendar.remove();
      }
    }

    function generateCalendarHTML() {
      const today = new Date();
      const currentMonth = today.getMonth();
      const currentYear = today.getFullYear();
      const todayDate = today.getDate();

      const monthNames = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
      ];

      const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
      const firstDay = new Date(currentYear, currentMonth, 1).getDay();

      let calendarHTML = `
        <div class="text-center mb-4">
          <div class="font-semibold text-gray-800">${monthNames[currentMonth]} ${currentYear}</div>
        </div>
        <div class="grid grid-cols-7 gap-1 mb-2">
          <div class="text-center text-xs font-medium text-gray-500 py-2">Su</div>
          <div class="text-center text-xs font-medium text-gray-500 py-2">Mo</div>
          <div class="text-center text-xs font-medium text-gray-500 py-2">Tu</div>
          <div class="text-center text-xs font-medium text-gray-500 py-2">We</div>
          <div class="text-center text-xs font-medium text-gray-500 py-2">Th</div>
          <div class="text-center text-xs font-medium text-gray-500 py-2">Fr</div>
          <div class="text-center text-xs font-medium text-gray-500 py-2">Sa</div>
        </div>
        <div class="grid grid-cols-7 gap-1">
      `;

      // Empty cells for days before month starts
      for (let i = 0; i < firstDay; i++) {
        calendarHTML += `<div class="h-8"></div>`;
      }

      // Days of the month
      for (let day = 1; day <= daysInMonth; day++) {
        const isToday = day === todayDate;
        const isStreakDay = day >= todayDate - 6 && day < todayDate; // Last 7 days including today
        const isPastStreakDay = day < todayDate - 6; // Older streak days (just for demo)

        let bgColor = 'hover:bg-gray-100';
        let borderColor = '';

        if (isToday) {
          bgColor = 'bg-blue-500 text-white';
        } else if (isStreakDay) {
          borderColor = 'ring-2 ring-red-400';
        } else if (isPastStreakDay && Math.random() > 0.7) { // Random older streak days for demo
          borderColor = 'ring-2 ring-red-300 ring-opacity-50';
        }

        calendarHTML += `
          <div class="h-8 w-8 rounded-full flex items-center justify-center text-sm font-medium ${bgColor} ${borderColor} cursor-pointer transition-all relative">
            ${day}
            ${isStreakDay && !isToday ? '<div class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full border-2 border-white"></div>' : ''}
          </div>
        `;
      }

      calendarHTML += `</div>`;
      return calendarHTML;
    }

    // Notifications
    const notifyEl = document.getElementById('notify');
    const notifyBtn = document.getElementById('notifBtn');

    function showNotification(title, body) {
      document.getElementById('notifyTitle').textContent = title;
      document.getElementById('notifyBody').textContent = body;
      notifyEl.classList.remove('hidden');
      setTimeout(() => notifyEl.classList.add('hidden'), 5000);
    }

    function toggleNotifications() {
      const existingDropdown = document.getElementById('notifications-dropdown');
      if (existingDropdown) {
        existingDropdown.remove();
        return;
      }

      const dropdownHTML = `
        <div id="notifications-dropdown" class="absolute top-full right-0 mt-2 w-80 bg-white rounded-xl shadow-2xl border border-gray-200 z-[300]">
          <div class="p-4 border-b border-gray-100">
            <h3 class="font-bold text-gray-800 flex items-center gap-2">
              <i class="fas fa-bell text-blue-500"></i>
              Notifications
            </h3>
          </div>
          <div class="max-h-96 overflow-y-auto">
            <div class="p-8 text-center">
              <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-bell-slash text-gray-400 text-2xl"></i>
              </div>
              <div class="text-gray-500 font-medium">No notifications</div>
              <div class="text-sm text-gray-400 mt-1">You're all caught up!</div>
            </div>
          </div>
        </div>
      `;

      // Position relative to notification button
      const rect = notifyBtn.getBoundingClientRect();
      const dropdown = document.createElement('div');
      dropdown.innerHTML = dropdownHTML;
      dropdown.className = 'absolute';
      dropdown.style.top = (rect.bottom + 8) + 'px'; // 8px below the button
      dropdown.style.left = (rect.left - 320 + rect.width) + 'px'; // Align dropdown right edge with button right edge
      dropdown.style.width = '320px';
      dropdown.style.zIndex = '300';
      dropdown.style.position = 'fixed'; // Ensure it's positioned relative to viewport

      document.body.appendChild(dropdown);
    }

    function closeNotifications() {
      const dropdown = document.getElementById('notifications-dropdown');
      if (dropdown) {
        dropdown.remove();
      }
    }

    notifyBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleNotifications();
    });

    // Close notifications when clicking outside
    document.addEventListener('click', (e) => {
      const dropdown = document.getElementById('notifications-dropdown');
      if (dropdown && !dropdown.contains(e.target) && e.target !== notifyBtn) {
        closeNotifications();
      }
    });

    // Fetch and display stats
    let progressChart = null;

    async function fetchStats() {
      try {
        const res = await fetch('/api/stats');
        if (!res.ok) throw new Error('Failed to fetch stats');
        const data = await res.json();

        // Update stat cards
        document.getElementById('completedLessons').textContent = data.completedLessons || 0;
        document.getElementById('vocabCount').textContent = data.vocabLearned || 0;
        document.getElementById('streakCount').textContent = data.currentStreak || 0;
        document.getElementById('streakDisplay').textContent = data.currentStreak || 0;
        document.getElementById('testsCount').textContent = data.testsTaken || 0;
        document.getElementById('avgScore').textContent = data.avgScore || 0;

        // Update skill progress bars
        const skills = {
          grammar: data.grammarProgress || 0,
          vocab: data.vocabProgress || 0,
          speaking: data.speakingProgress || 0,
          writing: data.writingProgress || 0
        };

        Object.entries(skills).forEach(([skill, value]) => {
          document.getElementById(`${skill}Bar`).style.width = `${value}%`;
          document.getElementById(`${skill}Percent`).textContent = `${value}%`;
        });

        // Update timestamp
        document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();

        // Render doughnut chart
        renderChart(data.completedLessons || 0, Math.max(0, (data.totalLessons || 10) - (data.completedLessons || 0)));

        // Update recent activity
        updateRecentActivity(data.recentActivity || []);

        // Show notification for low progress
        const pct = data.totalLessons ? (data.completedLessons / data.totalLessons) * 100 : 0;
        if (pct < 10 && pct > 0) {
          showNotification('Keep Learning!', 'Start a lesson today to boost your progress.');
        }
      } catch (err) {
        console.error('Error fetching stats:', err);
        showNotification('Error', 'Could not load stats. Please refresh the page.');
      }
    }

    function renderChart(completed, remaining) {
      const ctx = document.getElementById('progressChart').getContext('2d');
      const total = completed + remaining;

      const data = {
        labels: ['Completed', 'Remaining'],
        datasets: [{
          data: [completed, Math.max(0, remaining)],
          backgroundColor: [
            'rgba(34,197,94,0.9)',
            'rgba(156,163,175,0.8)'
          ],
          hoverBackgroundColor: [
            'rgba(34,197,94,1)',
            'rgba(156,163,175,1)'
          ]
        }]
      };

      if (progressChart) progressChart.destroy();
      progressChart = new Chart(ctx, {
        type: 'doughnut',
        data,
        options: {
          cutout: '65%',
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                padding: 15,
                font: { size: 12 },
                usePointStyle: true,
                generateLabels: function(chart) {
                  const data = chart.data;
                  if (data.labels.length && data.datasets.length) {
                    return data.labels.map((label, i) => {
                      const value = data.datasets[0].data[i];
                      const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                      return {
                        text: `${label}: ${value} (${percentage}%)`,
                        fillStyle: data.datasets[0].backgroundColor[i],
                        strokeStyle: data.datasets[0].backgroundColor[i],
                        lineWidth: 0,
                        hidden: false,
                        index: i
                      };
                    });
                  }
                  return [];
                }
              }
            },
            tooltip: {
              enabled: true,
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleColor: '#fff',
              bodyColor: '#fff',
              borderColor: 'rgba(34, 197, 94, 1)',
              borderWidth: 2,
              cornerRadius: 8,
              displayColors: true,
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.parsed;
                  const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                  return `${label}: ${value} lessons (${percentage}%)`;
                },
                afterLabel: function(context) {
                  if (context.label === 'Completed') {
                    return 'Great progress! Keep it up! 🎉';
                  } else if (context.label === 'Remaining') {
                    return 'Complete more lessons to progress! 📚';
                  }
                  return '';
                }
              }
            },
            centerText: {
              afterDatasetDraw: function(chart, args, options) {
                const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
                ctx.save();

                const centerX = (left + right) / 2;
                const centerY = (top + bottom) / 2;
                const completedText = `${Math.round((completed / total) * 100)}%`;
                const totalText = `of ${total}`;

                // Draw percentage in center
                ctx.font = `bold 28px Inter, sans-serif`;
                ctx.fillStyle = '#22c55e';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(completedText, centerX, centerY - 8);

                // Draw "Complete" text below
                ctx.font = `14px Inter, sans-serif`;
                ctx.fillStyle = '#6b7280';
                ctx.fillText('Complete', centerX, centerY + 12);

                ctx.restore();
              }
            }
          },
          onHover: function(event, elements) {
            if (elements.length > 0) {
              const segment = elements[0];

              // Add visual feedback on hover
              event.native.target.style.cursor = 'pointer';

              // Show percentage on hover
              const value = data.datasets[0].data[segment.index];
              const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
              document.getElementById('chartValue').textContent = `${percentage}%`;
              document.getElementById('chartLabel').textContent = data.labels[segment.index];
              document.getElementById('chartValue').classList.remove('hidden');
              document.getElementById('chartLabel').classList.remove('hidden');
            }
          },
          onLeave: function(event, elements) {
            // Hide center text when not hovering
            document.getElementById('chartValue').classList.add('hidden');
            document.getElementById('chartLabel').classList.add('hidden');
          },
          onClick: function(event, elements) {
            if (elements.length > 0) {
              const segment = elements[0];
              const label = data.labels[segment.index];
              const value = data.datasets[0].data[segment.index];

              // Show detailed information
              if (label === 'Completed') {
                showNotification('Progress Update', `You've completed ${value} lessons! ${total - value} more to go!`);
              } else if (label === 'Remaining') {
                showNotification('Keep Learning!', `You have ${value} lessons remaining. Start learning now!`);
              }
            }
          },
          animation: {
            animateScale: true,
            animateRotate: true,
            duration: 1500,
            easing: 'easeInOutQuart'
          }
        }
      });
    }

    function updateRecentActivity(activities) {
      const list = document.getElementById('recentList');
      list.innerHTML = '';

      if (!activities || activities.length === 0) {
        list.innerHTML = '<li class="text-sm text-gray-500 p-3">No recent activity. Start learning to see updates!</li>';
        return;
      }

      activities.slice(0, 5).forEach(activity => {
        const icons = {
          lesson: 'fa-book',
          vocab: 'fa-spell-check',
          test: 'fa-clipboard-check',
          speaking: 'fa-microphone'
        };
        const colors = {
          lesson: 'blue',
          vocab: 'green',
          test: 'purple',
          speaking: 'orange'
        };

        const icon = icons[activity.type] || 'fa-circle';
        const color = colors[activity.type] || 'gray';

        list.innerHTML += `
          <li class="flex items-center gap-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition">
            <div class="w-10 h-10 bg-${color}-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <i class="fas ${icon} text-${color}-600"></i>
            </div>
            <div class="flex-1 min-w-0">
              <div class="font-medium text-gray-800 text-sm truncate">${activity.title}</div>
              <div class="text-xs text-gray-500">${activity.timeAgo}</div>
            </div>
            ${activity.xp ? `<div class="text-green-600 font-bold text-sm">+${activity.xp} XP</div>` : ''}
          </li>
        `;
      });
    }

    // Initialize
    fetchStats();

    // Refresh every 30 seconds
    setInterval(fetchStats, 30000);
  </script>

</body>
</html>
